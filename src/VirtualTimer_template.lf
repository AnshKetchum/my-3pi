 target C {
  platform: "RP2040",
  threading: false,
  keepalive: true
}

import Display from "lib/Display.lf"

preamble {=
  #include <hardware/gpio.h>
  #include <pico/stdlib.h>
  #include <hardware/timer.h>
  #include <hardware/irq.h>
  #define ALARM_NUM 0
  #define ALARM_IRQ TIMER_IRQ_0
=}

main reactor {

  preamble {=

    // Alarm interrupt handler
    static volatile bool alarm_fired;
    static void* action;
    static bool last_led;
     
    typedef void (*virtual_timer_callback_t)(void);
 
    // Definition of linked list node 
    typedef struct node_t {
      /* Put the variables needed for linked list node here */
      // value for the timer
      uint32_t timer_value;
      //callback function for timer
      virtual_timer_callback_t callback;
      int alarm_num;

      //assign a callback function: 

      /*********************************************
          DO NOT CHANGE THE CODE BELOW
      *********************************************/
      // next node pointer
      struct node_t * next ;
      } node_t ;

    //The linked list for timer
    static node_t* linked_list = NULL;

    // linked list operation functions
    // insert the node in the sorted linked list (linked_list) and return the sorted linked list after the insertion
    void list_insert_sorted(node_t* node){
       if(linked_list == NULL){
          node -> next = NULL;
          linked_list = node;
       }
       else{
          if(linked_list -> timer_value > node -> timer_value){
              node -> next = linked_list;
              linked_list = node;
            }     
          else{
              // node is somewhere after the head
              node_t* prev_node = linked_list;
              node_t* curr_node = linked_list->next;
              while(curr_node != NULL && curr_node -> timer_value < node -> timer_value){
                  // iterate until end of list or the current node has a greater value
                  prev_node = curr_node;
                  curr_node = curr_node -> next;
              }
              // insert node
              prev_node -> next = node;
              node -> next = curr_node;
          } 
       }
    }

    // remove the node from linked list
    void list_remove(node_t* node){
        if(linked_list != NULL){
            if(linked_list == node){
                linked_list = linked_list -> next;
            }
            else{
                node_t* prev_node = linked_list;
                node_t* curr_node = linked_list -> next;
                while(curr_node != NULL && curr_node != node){
                    prev_node = curr_node;
                    curr_node = curr_node -> next;
                }
                if(curr_node != NULL){
                    prev_node -> next = curr_node -> next; 
                }
            }
        }
    }
    // return and remove the first node in the linked list
    node_t* list_remove_first(){
      node_t* head = linked_list;
      if (head != NULL) {
          linked_list = head->next;
      }
      return head;
    }
    /*********************************************
        DO NOT CHANGE THE CODE ABOVE
    *********************************************/

    /* You can also create your own linked list functions here. */

    void led_toggle() {
        last_led = !last_led;
        gpio_put(PICO_DEFAULT_LED_PIN, last_led);

        //uint32_t* ptr = (uint32_t*) (0xd0000014); // 1-> Turning LED On; Clearing LED  
        //uint32_t mask = 1ul << 25;
        //*ptr |= mask;       
        printf("Timer Fired :)"); 
        //can we do this
        node_t* first = list_remove_first(linked_list); 
        int alarm = first -> alarm_num; 
        hw_clear_bits(&timer_hw->intr, 1u << alarm); //This is needed + we need to determine what timer the alarm is on
        free(first);
    }

    node_t * get_node_by_id(int id) {
        node_t * iterator = linked_list; 
        while(iterator != NULL) {
            if(iterator->timer_value == id) {
                return iterator;
            }
            iterator = iterator->next; 
        }
    }

    void virtual_timer_init(void){

        // Map over constants
        int timer_irq_maps [] = {TIMER_IRQ_0, TIMER_IRQ_1, TIMER_IRQ_2, TIMER_IRQ_3};
        int i = 0;
        node_t * iterator = linked_list;

        for(int i = 0; i < 4 && iterator != NULL; i++) {
            // Enable the interrupt for our alarm (the timer outputs 4 alarm irqs)
            hw_set_bits(&timer_hw->inte, 1u << i);

            // Set irq handler for alarm irq
            irq_set_exclusive_handler(timer_irq_maps[i], iterator->callback);

            // Enable the alarm irq
            // Enable interrupt in block and at processor
            irq_set_enabled(timer_irq_maps[i], true);

            timer_hw->alarm[i] = (uint32_t) iterator->timer_value;
            iterator -> alarm_num = i;
            iterator = iterator->next;
        }

        // Write the lower 32 bits of the target time to the alarm which
        // will arm it
    }
    uint32_t virtual_timer_start(uint32_t microseconds, virtual_timer_callback_t cb){
        
        node_t * timer_pointer = malloc (sizeof(node_t));
        timer_pointer -> timer_value = microseconds;
        timer_pointer -> callback = cb;
        list_insert_sorted(timer_pointer);

        return microseconds;
    }
    uint32_t virtual_timer_start_repeated(uint32_t microseconds, virtual_timer_callback_t cb){
        /* TODO */
    }
    void virtual_timer_cancel(uint32_t time_id ){
        /* TODO */
        //free
        //clear timer
    }

  =}


    display = new Display()
    timer print_hw_timer(0, 5000ms)
    // physical action a: int
    state last_time: int64_t
    

  reaction(startup) {=
      // initialize the LED and the virtual timer    
    //   action = a;
      stdio_init_all();
      printf("Startup");

      gpio_init(PICO_DEFAULT_LED_PIN);
      gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
      last_led = true;
      gpio_put(25, true);


    //Create our timers

        // 10 second delay
        uint64_t time1 = timer_hw->timerawl + 1000000 * 15;
        int id = virtual_timer_start(time1, led_toggle); 
        //sprint(microseconds+ "\n");

        uint64_t time2 = timer_hw->timerawl + 1000000 * 20;
        int id2 = virtual_timer_start(time2, led_toggle); 
        //sprint(microseconds+ "\n");
        uint64_t time3 = timer_hw->timerawl + 1000000 * 25;
        int id3 = virtual_timer_start(time3, led_toggle); 

        virtual_timer_init();


        //self->last_time = 0;
  =}
  
  reaction(print_hw_timer) -> display.line0 {=
      static char buf[17];
    //printf("HI");
      snprintf(buf, 17, "T: %d", timer_hw->timelr);
      lf_set(display.line0, buf);  
  =}

//   reaction(a) -> display.line1 {=
//     static char buf [17];
//     interval_t elapsed_time = lf_time_logical_elapsed() / 1000000;
    
//     snprintf(buf, 17, "TM FR:%lld", elapsed_time - self->last_time);
    
//     lf_set(display.line1, buf);
    
//     self->last_time = elapsed_time;
//   =}

  /* TODO: add reaction and timer to create the environment to test */

}
