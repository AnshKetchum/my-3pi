 target C {
  platform: "RP2040",
  threading: false,
  keepalive: true
}

import Display from "lib/Display.lf"

preamble {=
  #include <hardware/gpio.h>
  #include <pico/stdlib.h>
  #include <hardware/timer.h>
  #include <hardware/irq.h> 
  #define ALARM_NUM 0
  #define ALARM_IRQ TIMER_IRQ_0
  #define CONSTANT_BUMP 1000000 * 1
=}

main reactor {

  preamble {=

    // Alarm interrupt handler
    static volatile bool alarm_fired;
    static void* action;
    static bool last_led;
     
    typedef void (*virtual_timer_callback_t)(void);
 
    // Definition of linked list node 
    typedef struct node_t {
      /* Put the variables needed for linked list node here */
      // value for the timer
      uint32_t timer_value;
      uint32_t original_timer_value;
      //callback function for timer
      virtual_timer_callback_t callback;
      int alarm_num;
      int repeat_interval; 
      bool cancel;
      //assign a callback function: 

      /*********************************************
          DO NOT CHANGE THE CODE BELOW
      *********************************************/
      // next node pointer
      struct node_t * next ;
      } node_t ;

    //The linked list for timer
    static node_t* linked_list = NULL;

    // linked list operation functions
    // insert the node in the sorted linked list (linked_list) and return the sorted linked list after the insertion
    void list_insert_sorted(node_t* node){
       if(linked_list == NULL){
          node -> next = NULL;
          linked_list = node;
       }
       else{
          if(linked_list -> timer_value > node -> timer_value){
              node -> next = linked_list;
              linked_list = node;
            }     
          else{
              // node is somewhere after the head
              node_t* prev_node = linked_list;
              node_t* curr_node = linked_list->next;
              while(curr_node != NULL && curr_node -> timer_value < node -> timer_value){
                  // iterate until end of list or the current node has a greater value
                  prev_node = curr_node;
                  curr_node = curr_node -> next;
              }
              // insert node
              prev_node -> next = node;
              node -> next = curr_node;
          } 
       }
    }

    // remove the node from linked list
    void list_remove(node_t* node){
        if(linked_list != NULL){
            if(linked_list == node){
                linked_list = linked_list -> next;
            }
            else{
                node_t* prev_node = linked_list;
                node_t* curr_node = linked_list -> next;
                while(curr_node != NULL && curr_node != node){
                    prev_node = curr_node;
                    curr_node = curr_node -> next;
                }
                if(curr_node != NULL){
                    prev_node -> next = curr_node -> next; 
                }
            }
        }
    }
    // return and remove the first node in the linked list
    node_t* list_remove_first(){
      node_t* head = linked_list;
      if (head != NULL) {
          linked_list = head->next;
      }
      return head;
    }
    /*********************************************
        DO NOT CHANGE THE CODE ABOVE
    *********************************************/
    /* You can also create your own linked list functions here. */
    void process_callback() {
        //Remove node, reset timer
        printf("Processing Callback \n");         

        //sleep(1);
        // Adjust the time to handle edge case timing race conditions
        // if(first->timer_value <= timer_hw->timerawl) {
        //     first->timer_value += CONSTANT_BUMP;             
        //     list_insert_sorted(first);
        // }

        // Clean up the original
        hw_clear_bits(&timer_hw->intr, 1u << ALARM_NUM); //This is needed + we need to determine what timer the alarm is on
            
        // else {
        if(linked_list != NULL)  {
            node_t* first = list_remove_first(linked_list); 

            printf("%lld\n", first->timer_value);
            if(!first->cancel) {
                first->callback();
            }

            // Handle Repeats 
            if(first->repeat_interval != -1) {
                first->timer_value = first->timer_value + first->repeat_interval;
                list_insert_sorted(first);
            } else {
                free(first);
            }
        }
        // }
        // Setup the next callback
        setup_next_callback();
    }


    // Pull a single event down, and queue that for IRQ
    void setup_next_callback() {
        if(linked_list != NULL) {
            printf("In linked list");

            node_t * iterator = linked_list;

            if(iterator->timer_value > timer_hw->timerawl) {
                timer_hw->alarm[ALARM_NUM] = (uint32_t) iterator->timer_value;
            } else {
                timer_hw->alarm[ALARM_NUM] = timer_hw->timerawl + CONSTANT_BUMP;
            }
            
            iterator -> alarm_num = ALARM_NUM;
        } else {
            timer_hw->alarm[ALARM_NUM] = timer_hw->timerawl + CONSTANT_BUMP;
        }
    }

    void led_turn_on() {
        gpio_put(PICO_DEFAULT_LED_PIN, false);
    }

    void led_turn_off() {
        gpio_put(PICO_DEFAULT_LED_PIN, true);
    }

    void led_toggle() {
        last_led = !last_led;
        gpio_put(PICO_DEFAULT_LED_PIN, last_led);
    }

    node_t * get_node_by_id(int id) {
        node_t * iterator = linked_list; 
        while(iterator != NULL) {
            if(iterator->original_timer_value == id) {
                return iterator;
            }
            iterator = iterator->next; 
        }
        return iterator;
    }

    void virtual_timer_init(void){
        hw_set_bits(&timer_hw->inte, 1u << ALARM_NUM);
        irq_set_exclusive_handler(ALARM_IRQ, process_callback);
        irq_set_enabled(ALARM_IRQ, true);

        setup_next_callback();
    }
    uint32_t virtual_timer_start(uint32_t microseconds, virtual_timer_callback_t cb){
        
        printf("Inserted new event.\n");
        node_t * timer_pointer = malloc (sizeof(node_t));
        timer_pointer -> timer_value = microseconds;
        timer_pointer -> original_timer_value = microseconds;
        timer_pointer -> repeat_interval = -1;
        timer_pointer -> callback = cb;
        timer_pointer -> cancel = false;
        list_insert_sorted(timer_pointer);

        return microseconds;
    }
    uint32_t virtual_timer_start_repeated(uint32_t microseconds, uint32_t cadence, virtual_timer_callback_t cb){
        /* TODO */
        printf("Inserted new event.\n");
        node_t * timer_pointer = malloc (sizeof(node_t));
        timer_pointer -> timer_value = microseconds;
        timer_pointer -> original_timer_value = microseconds;
        timer_pointer -> callback = cb;
        timer_pointer -> repeat_interval = cadence;
        timer_pointer -> cancel = false;
        list_insert_sorted(timer_pointer);

        return microseconds;
    }
    void virtual_timer_cancel(uint32_t time_id ){
        /* TODO */
        //free
        //clear timer
        if(linked_list != NULL) {
            node_t* node_for_time = get_node_by_id(time_id);
            node_for_time->cancel = true;
            node_for_time->repeat_interval = -1;

            if(node_for_time == linked_list) {
                hw_clear_bits(&timer_hw->intr, 1u << ALARM_NUM); //This is needed + we need to determine what timer the alarm is on
            }
        }
    }

  =}


    display = new Display()
    timer print_hw_timer(0, 1000ms)
    // physical action a: int
    state last_time: int64_t
    state counter: int64_t
    state timer_id: int64_t
    
    

  reaction(startup) {=
      // initialize the LED and the virtual timer    
    //   action = a;
      stdio_init_all();
      printf("Startup");

      gpio_init(PICO_DEFAULT_LED_PIN);
      gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
      last_led = true;
      gpio_put(25, true);

        self->counter = 0;
    //Create our timers

        // 10 second delay

        uint64_t time1 = timer_hw->timerawl + 1000000 * 20;
        int id1 = virtual_timer_start(time1, led_turn_on); 

        uint64_t time4 = time1 + 0000001 * 1;
        int id4 = virtual_timer_start(time4, led_turn_off); 


        //9.2.7 checkoff
        virtual_timer_init();
  =}
  
  reaction(print_hw_timer) -> display.line0, display.line1 {=
        static char buf[17];
        //printf("HI");
        
        snprintf(buf, 17, "T: %lld", self->counter);
        lf_set(display.line0, buf);  

        /*
        if(self->counter % 15 == 0 && self->timer_id != 0 && self->counter % 30 != 0) {
            virtual_timer_cancel(self->timer_id);
            self->timer_id = 0;
            lf_set(display.line1, "Canceling timer");  
        }
        else if(self->counter % 5 == 0 && self->timer_id == 0 && self->counter % 30 != 0) {
            uint64_t time = timer_hw->timerawl + 1000000 * 0;
            self->timer_id = virtual_timer_start_repeated(time, 1000000 * 1, led_toggle);
            lf_set(display.line1, "Starting timer");  
        }
        else {
            lf_set(display.line1, "");  
        }
        */


        // Add and cancel a timer repeatedly
        self->counter++;
  =}

//   reaction(a) -> display.line1 {=
//     static char buf [17];
//     interval_t elapsed_time = lf_time_logical_elapsed() / 1000000;
    
//     snprintf(buf, 17, "TM FR:%lld", elapsed_time - self->last_time);
    
//     lf_set(display.line1, buf);
    
//     self->last_time = elapsed_time;
//   =}

  /* TODO: add reaction and timer to create the environment to test */

}
