 target C {
  platform: "RP2040",
  threading: false,
  keepalive: true
}

import Display from "lib/Display.lf"

preamble {=
  #include <hardware/gpio.h>
  #include <pico/stdlib.h>
  #include <hardware/timer.h>
  #include <hardware/irq.h>
  #define ALARM_NUM 0
  #define ALARM_IRQ TIMER_ALARM_IRQ_NUM(timer_hw, ALARM_NUM)
=}

main reactor {

  preamble {=

    // Alarm interrupt handler
    static volatile bool alarm_fired;
    static void* action;
     
    typedef void (*virtual_timer_callback_t)(void);
 
    // Definition of linked list node 
    typedef struct node_t {
      /* Put the variables needed for linked list node here */
      // value for the timer
      uint32_t timer_value;

      /*********************************************
          DO NOT CHANGE THE CODE BELOW
      *********************************************/
      // next node pointer
      struct node_t * next ;
      } node_t ;

    //The linked list for timer
    static node_t* linked_list = NULL;

    // linked list operation functions
    // insert the node in the sorted linked list (linked_list) and return the sorted linked list after the insertion
    void list_insert_sorted(node_t* node){
       if(linked_list == NULL){
          node -> next = NULL;
          linked_list = node;
       }
       else{
          if(linked_list -> timer_value > node -> timer_value){
              node -> next = linked_list;
              linked_list = node;
            }     
          else{
              // node is somewhere after the head
              node_t* prev_node = linked_list;
              node_t* curr_node = linked_list->next;
              while(curr_node != NULL && curr_node -> timer_value < node -> timer_value){
                  // iterate until end of list or the current node has a greater value
                  prev_node = curr_node;
                  curr_node = curr_node -> next;
              }
              // insert node
              prev_node -> next = node;
              node -> next = curr_node;
          } 
       }
    }

    // remove the node from linked list
    void list_remove(node_t* node){
        if(linked_list != NULL){
            if(linked_list == node){
                linked_list = linked_list -> next;
            }
            else{
                node_t* prev_node = linked_list;
                node_t* curr_node = linked_list -> next;
                while(curr_node != NULL && curr_node != node){
                    prev_node = curr_node;
                    curr_node = curr_node -> next;
                }
                if(curr_node != NULL){
                    prev_node -> next = curr_node -> next; 
                }
            }
        }
    }
    // return and remove the first node in the linked list
    node_t* list_remove_first(){
      node_t* head = linked_list;
      if (head != NULL) {
          linked_list = head->next;
      }
      return head;
    }
    /*********************************************
        DO NOT CHANGE THE CODE ABOVE
    *********************************************/

    /* You can also create your own linked list functions here. */

    void lab5_timer_irq_handler() {
        // Clear the alarm irq
        hw_clear_bits(&timer_hw->intr, 1u << ALARM_NUM);

        // alarm_fired = true;
        lf_schedule(action, 0);
    }

   
    void virtual_timer_init(void){
        // Enable the interrupt for our alarm (the timer outputs 4 alarm irqs)
        hw_set_bits(&timer_hw->inte, 1u << ALARM_NUM);
        // Set irq handler for alarm irq
        irq_set_exclusive_handler(ALARM_IRQ, lab5_timer_irq_handler);
        // Enable the alarm irq
        irq_set_enabled(ALARM_IRQ, true);
        // Enable interrupt in block and at processor

        // Alarm is only 32 bits so if trying to delay more
        // than that need to be careful and keep track of the upper
        // bits

        // 10 second delay
        uint64_t target = timer_hw->timerawl + 1000000 * 10;

        // Write the lower 32 bits of the target time to the alarm which
        // will arm it
        timer_hw->alarm[ALARM_NUM] = (uint32_t) target;
    }
    uint32_t virtual_timer_start(uint32_t microseconds, virtual_timer_callback_t cb){
        /* TODO */
    }
    uint32_t virtual_timer_start_repeated(uint32_t microseconds, virtual_timer_callback_t cb){
        /* TODO */
    }
    void virtual_timer_cancel(uint32_t time_id ){
        /* TODO */
    }

  =}


    display = new Display()
    timer print_hw_timer(0, 5000ms)
    physical action a: int
    state last_time: int64_t
    

  reaction(startup) ->a {=
      // initialize the LED and the virtual timer    
      action = a;

      gpio_init(PICO_DEFAULT_LED_PIN);
      gpio_set_dir(PICO_DEFAULT_LED_PIN, GPIO_OUT);
      gpio_put(25, true);
      virtual_timer_init();

        self->last_time = 0;
  =}
  
  reaction(print_hw_timer) -> display.line0 {=
      static char buf[17];
      snprintf(buf, 17, "T: %d", timer_hw->timelr);
      lf_set(display.line0, buf);  
  =}

  reaction(a) -> display.line1 {=
    static char buf [17];
    interval_t elapsed_time = lf_time_logical_elapsed() / 1000000;
    
    snprintf(buf, 17, "TM FR:%lld", elapsed_time - self->last_time);
    
    lf_set(display.line1, buf);
    
    self->last_time = elapsed_time;
  =}

  /* TODO: add reaction and timer to create the environment to test */

}
